import {
  collection,
  addDoc,
  getDocs,
  updateDoc,
  deleteDoc,
  doc,
  query,
  where
} from "firebase/firestore";
import { db } from "../firebase";
import generateUniqueId from "../utils/generateUniqueId";

// üîó Firestore Ïª¨Î†âÏÖò
const subProgramMemberCollection = collection(db, "members"); // ÏÜåÎ¨∏Ïûê 'members'

/**
 * ‚úÖ ÏÑ∏Î∂ÄÏÇ¨ÏóÖÎ≥Ñ Ïù¥Ïö©Ïûê Ï†ÑÏ≤¥ Ï°∞Ìöå
 */
export async function getSubProgramMembers(subProgram) {
  try {
    const q = query(subProgramMemberCollection, where("subProgram", "==", subProgram));
    const snapshot = await getDocs(q);
    return snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
  } catch (err) {
    console.error("ÏÑ∏Î∂ÄÏÇ¨ÏóÖÎ≥Ñ ÌöåÏõê Ï°∞Ìöå Ïò§Î•ò:", err);
    throw err;
  }
}

/**
 * ‚úÖ Îã®Ïùº ÌöåÏõê Îì±Î°ù
 */
export async function registerSubProgramMember(member) {
  try {
    const fullMember = {
      ...member,
      userId: generateUniqueId(),
      createdAt: new Date().toISOString()
    };
    const docRef = await addDoc(subProgramMemberCollection, fullMember);
    return docRef.id;
  } catch (err) {
    console.error("ÌöåÏõê Îì±Î°ù Ïò§Î•ò:", err);
    throw err;
  }
}

/**
 * ‚úÖ ÌöåÏõê Ï†ïÎ≥¥ ÏàòÏ†ï
 */
export async function updateSubProgramMember(id, updatedData) {
  try {
    const docRef = doc(db, "members", id);
    await updateDoc(docRef, updatedData);
  } catch (err) {
    console.error("ÌöåÏõê ÏàòÏ†ï Ïò§Î•ò:", err);
    throw err;
  }
}

/**
 * ‚úÖ ÌöåÏõê ÏÇ≠Ï†ú
 */
export async function deleteSubProgramMember(id) {
  try {
    const docRef = doc(db, "members", id);
    await deleteDoc(docRef);
  } catch (err) {
    console.error("ÌöåÏõê ÏÇ≠Ï†ú Ïò§Î•ò:", err);
    throw err;
  }
}

/**
 * ‚úÖ ÏùºÍ¥Ñ ÏÇ≠Ï†ú
 */
export async function deleteMultipleSubProgramMembers(ids) {
  try {
    const deletions = ids.map((id) => deleteDoc(doc(db, "members", id)));
    await Promise.all(deletions);
  } catch (err) {
    console.error("ÏùºÍ¥Ñ ÏÇ≠Ï†ú Ïò§Î•ò:", err);
    throw err;
  }
}
// src/services/subProgramMemberAPI.js

import {
  collection, addDoc, getDoc, getDocs, updateDoc, deleteDoc, doc, query, where, and
} from "firebase/firestore";
import { db } from "../firebase";
import generateUniqueId from "../utils/generateUniqueId";
import { getStructureBySubProgram } from "./teamSubProgramMapAPI";
import { getAllMembers } from "./memberAPI";
import { getAgeGroup } from "../utils/ageGroup";
import { normalizeDate, getCurrentKoreanDate } from "../utils/dateUtils";

const subProgramMemberCollection = collection(db, "SubProgramUsers");

// ‚úÖ Ï†ÑÌôîÎ≤àÌò∏ Ï†ïÍ∑úÌôî Ìï®Ïàò Ï∂îÍ∞Ä
function normalizePhone(phone) {
  if (!phone) return "";
  const digits = phone.replace(/\D/g, "");
  if (digits.length === 11) {
    return `${digits.slice(0, 3)}-${digits.slice(3, 7)}-${digits.slice(7)}`;
  }
  return phone;
}

// ‚úÖ ÏïàÏ†ÑÌïú ÎÇ†Ïßú Ï≤òÎ¶¨ Ìï®Ïàò (ÏãúÍ∞ÑÎåÄ Î¨∏Ï†ú ÏôÑÏ†Ñ Ìï¥Í≤∞)
function safeBirthdateExtract(birthdate) {
  if (!birthdate) return "";
  
  try {
    // Firebase Timestamp Í∞ùÏ≤¥ Ï≤òÎ¶¨
    if (birthdate && typeof birthdate.toDate === 'function') {
      const jsDate = birthdate.toDate();
      // Î°úÏª¨ ÏãúÍ∞ÑÏúºÎ°ú Î≥ÄÌôòÌïòÏó¨ ÎÇ†Ïßú Ï∂îÏ∂ú
      const year = jsDate.getFullYear();
      const month = String(jsDate.getMonth() + 1).padStart(2, '0');
      const day = String(jsDate.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    }

    // Date Í∞ùÏ≤¥ Ï≤òÎ¶¨
    if (birthdate instanceof Date) {
      const year = birthdate.getFullYear();
      const month = String(birthdate.getMonth() + 1).padStart(2, '0');
      const day = String(birthdate.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    }

    // Î¨∏ÏûêÏó¥ Ï≤òÎ¶¨
    if (typeof birthdate === 'string') {
      return normalizeDate(birthdate);
    }

    return "";
  } catch (error) {
    console.warn("ÏÉùÎÖÑÏõîÏùº Ï∂îÏ∂ú Ïò§Î•ò:", error, birthdate);
    return "";
  }
}

export async function getSubProgramMembers({ ÌåÄÎ™Ö, Îã®ÏúÑÏÇ¨ÏóÖÎ™Ö, ÏÑ∏Î∂ÄÏÇ¨ÏóÖÎ™Ö }) {
  try {
    let q = subProgramMemberCollection;
    
    // ÌïÑÌÑ∞Í∞Ä ÏóÜÏùÑ ÎïåÎäî Ï†ÑÏ≤¥ Ï°∞Ìöå
    if (!ÌåÄÎ™Ö && !Îã®ÏúÑÏÇ¨ÏóÖÎ™Ö && !ÏÑ∏Î∂ÄÏÇ¨ÏóÖÎ™Ö) {
      const snapshot = await getDocs(q);
      return snapshot.docs.map((doc) => {
        const data = doc.data();
        return {
          id: doc.id,
          ...data,
          Í∏∞Îä•: data["Í∏∞Îä•"] || "",
          Îã®ÏúÑÏÇ¨ÏóÖÎ™Ö: data["Îã®ÏúÑÏÇ¨ÏóÖÎ™Ö"] || "",
          // ‚úÖ ÏïàÏ†ÑÌïú ÎÇ†Ïßú Î≥ÄÌôò
          ÏÉùÎÖÑÏõîÏùº: safeBirthdateExtract(data.ÏÉùÎÖÑÏõîÏùº),
          Ïó∞ÎùΩÏ≤ò: normalizePhone(data.Ïó∞ÎùΩÏ≤ò), // ‚úÖ Ï†ÑÌôîÎ≤àÌò∏ Ï†ïÍ∑úÌôî Ï∂îÍ∞Ä
          createdAt: safeBirthdateExtract(data.createdAt)
        };
      });
    }

    // ‚úÖ AND Ï°∞Í±¥ÏúºÎ°ú Ï†ïÌôïÌïú ÌïÑÌÑ∞ÎßÅ Íµ¨ÌòÑ
    const conditions = [];
    if (ÌåÄÎ™Ö) conditions.push(where("ÌåÄÎ™Ö", "==", ÌåÄÎ™Ö));
    if (Îã®ÏúÑÏÇ¨ÏóÖÎ™Ö) conditions.push(where("Îã®ÏúÑÏÇ¨ÏóÖÎ™Ö", "==", Îã®ÏúÑÏÇ¨ÏóÖÎ™Ö));
    if (ÏÑ∏Î∂ÄÏÇ¨ÏóÖÎ™Ö) conditions.push(where("ÏÑ∏Î∂ÄÏÇ¨ÏóÖÎ™Ö", "==", ÏÑ∏Î∂ÄÏÇ¨ÏóÖÎ™Ö));

    // Ï°∞Í±¥Ïù¥ ÏûàÏùÑ ÎïåÎßå ÏøºÎ¶¨ Ï†ÅÏö©
    if (conditions.length === 1) {
      q = query(q, conditions[0]);
    } else if (conditions.length > 1) {
      // ‚úÖ AND Ï°∞Í±¥ Ï†ÅÏö© (Í∏∞Ï°¥Ïùò ORÏóêÏÑú Î≥ÄÍ≤Ω)
      q = query(q, and(...conditions));
    }

    const snapshot = await getDocs(q);
    return snapshot.docs.map((doc) => {
      const data = doc.data();
      return {
        id: doc.id,
        ...data,
        // ‚úÖ ÏïàÏ†ÑÌïú ÎÇ†Ïßú Î≥ÄÌôò
        ÏÉùÎÖÑÏõîÏùº: safeBirthdateExtract(data.ÏÉùÎÖÑÏõîÏùº),
        Ïó∞ÎùΩÏ≤ò: normalizePhone(data.Ïó∞ÎùΩÏ≤ò), // ‚úÖ Ï†ÑÌôîÎ≤àÌò∏ Ï†ïÍ∑úÌôî Ï∂îÍ∞Ä
        createdAt: safeBirthdateExtract(data.createdAt)
      };
    });
  } catch (err) {
    console.error("Ïù¥Ïö©Ïûê Ï°∞Ìöå Ïò§Î•ò:", err);
    throw err;
  }
}

// ‚úÖ ÏÑ∏Î∂ÄÏÇ¨ÏóÖ ÌöåÏõê Îì±Î°ù
export async function registerSubProgramMember(member) {
  try {
    if (!member.Ïù¥Ïö©ÏûêÎ™Ö || !member.Ïù¥Ïö©ÏûêÎ™Ö.trim()) {
      throw new Error("‚ö†Ô∏è Ïù¥Ïö©ÏûêÎ™ÖÏùÄ ÌïÑÏàò ÏûÖÎ†•ÏûÖÎãàÎã§.");
    }

    // üîπ Í∏∞Îä•/Îã®ÏúÑ Îß§Ìïë
    let ÌåÄÎ™Ö = member.ÌåÄÎ™Ö;
    let Îã®ÏúÑÏÇ¨ÏóÖÎ™Ö = member.Îã®ÏúÑÏÇ¨ÏóÖÎ™Ö;
    if ((!ÌåÄÎ™Ö || !Îã®ÏúÑÏÇ¨ÏóÖÎ™Ö) && member.ÏÑ∏Î∂ÄÏÇ¨ÏóÖÎ™Ö) {
      const map = await getStructureBySubProgram(member.ÏÑ∏Î∂ÄÏÇ¨ÏóÖÎ™Ö);
      if (map) {
        ÌåÄÎ™Ö = map.team;
        Îã®ÏúÑÏÇ¨ÏóÖÎ™Ö = map.unit;
      }
    }

    // üîπ Ï†ÑÏ≤¥ÌöåÏõêÍ¥ÄÎ¶¨ ÌôïÏù∏
    const allMembers = await getAllMembers();
    const normalizedPhone = normalizePhone(member.Ïó∞ÎùΩÏ≤ò);
    const normalizedBirthdate = normalizeDate(member.ÏÉùÎÖÑÏõîÏùº);

    const baseMember = allMembers.find(
      m =>
        m.name === member.Ïù¥Ïö©ÏûêÎ™Ö.trim() &&
        normalizeDate(m.birthdate) === normalizedBirthdate &&
        normalizePhone(m.phone) === normalizedPhone
    );

    if (!baseMember) {
      throw new Error("‚ö†Ô∏è Ï†ÑÏ≤¥ÌöåÏõêÍ¥ÄÎ¶¨Ïóê Îì±Î°ùÎêòÏßÄ ÏïäÏùÄ ÌöåÏõêÏùÄ ÏÑ∏Î∂ÄÏÇ¨ÏóÖ Îì±Î°ùÏù¥ Î∂àÍ∞ÄÌï©ÎãàÎã§.");
    }

    const Í≥†Ïú†ÏïÑÏù¥Îîî = baseMember.userId || baseMember.Í≥†Ïú†ÏïÑÏù¥Îîî;

    // üîπ ÎèôÏùº ÏÑ∏Î∂ÄÏÇ¨ÏóÖ Ï§ëÎ≥µ Í≤ÄÏÇ¨
    const q = query(
      subProgramMemberCollection,
      where("Í≥†Ïú†ÏïÑÏù¥Îîî", "==", Í≥†Ïú†ÏïÑÏù¥Îîî),
      where("ÏÑ∏Î∂ÄÏÇ¨ÏóÖÎ™Ö", "==", member.ÏÑ∏Î∂ÄÏÇ¨ÏóÖÎ™Ö)
    );
    const snapshot = await getDocs(q);
    if (!snapshot.empty) {
      throw new Error("‚ö†Ô∏è Ïù¥ÎØ∏ Ìï¥Îãπ ÏÑ∏Î∂ÄÏÇ¨ÏóÖÏóê Îì±Î°ùÎêú ÌöåÏõêÏûÖÎãàÎã§.");
    }

    // üîπ Ïó∞Î†πÎåÄ Í≥ÑÏÇ∞
    const ÏÉùÎÖÑÏõîÏùºStr = normalizedBirthdate;
    const ageGroup =
      ÏÉùÎÖÑÏõîÏùºStr && ÏÉùÎÖÑÏõîÏùºStr.length >= 4
        ? getAgeGroup(ÏÉùÎÖÑÏõîÏùºStr.substring(0, 4))
        : "ÎØ∏ÏÉÅ";

    // üîπ ÏµúÏ¢Ö Îì±Î°ù Îç∞Ïù¥ÌÑ∞
    const fullMember = {
      ...member,
      ÌåÄÎ™Ö,
      Îã®ÏúÑÏÇ¨ÏóÖÎ™Ö,
      ÏÉùÎÖÑÏõîÏùº: ÏÉùÎÖÑÏõîÏùºStr,
      Ïó∞ÎùΩÏ≤ò: normalizedPhone,
      Ïó∞Î†πÎåÄ: member.Ïó∞Î†πÎåÄ || ageGroup,
      Ïú†Î£åÎ¨¥Î£å: member.Ïú†Î£åÎ¨¥Î£å || "Î¨¥Î£å",
      Ïù¥Ïö©ÏÉÅÌÉú: member.Ïù¥Ïö©ÏÉÅÌÉú || "Ïù¥Ïö©",
      Í≥†Ïú†ÏïÑÏù¥Îîî,
      createdAt: getCurrentKoreanDate()
    };

    const docRef = await addDoc(subProgramMemberCollection, fullMember);
    console.log("‚úÖ ÏÑ∏Î∂ÄÏÇ¨ÏóÖ ÌöåÏõê Îì±Î°ù ÏôÑÎ£å:", docRef.id);
    return docRef.id;
  } catch (err) {
    console.error("ÌöåÏõê Îì±Î°ù Ïò§Î•ò:", err);
    throw err;
  }
}

// ‚úÖ ÏÑ∏Î∂ÄÏÇ¨ÏóÖ ÌöåÏõê ÏàòÏ†ï (createdAt Î≥¥Ï°¥ + updatedAt Í∏∞Î°ù + Ïó∞Î†πÎåÄ Ïû¨Í≥ÑÏÇ∞)
export async function updateSubProgramMember(id, updatedData) {
  try {
    const allMembers = await getAllMembers();
    const normalizedPhone = normalizePhone(updatedData.Ïó∞ÎùΩÏ≤ò);
    const normalizedBirthdate = normalizeDate(updatedData.ÏÉùÎÖÑÏõîÏùº);

    const baseMember = allMembers.find(
      m =>
        m.name === updatedData.Ïù¥Ïö©ÏûêÎ™Ö.trim() &&
        normalizeDate(m.birthdate) === normalizedBirthdate &&
        normalizePhone(m.phone) === normalizedPhone
    );

    if (!baseMember) {
      return { success: false, message: "‚ö†Ô∏è Ï†ÑÏ≤¥ÌöåÏõêÍ¥ÄÎ¶¨Ïóê ÏóÜÎäî ÌöåÏõêÏùÄ ÏàòÏ†ïÌï† Ïàò ÏóÜÏäµÎãàÎã§." };
    }

    const Í≥†Ïú†ÏïÑÏù¥Îîî = baseMember.userId || baseMember.Í≥†Ïú†ÏïÑÏù¥Îîî;

    const q = query(
      subProgramMemberCollection,
      where("Í≥†Ïú†ÏïÑÏù¥Îîî", "==", Í≥†Ïú†ÏïÑÏù¥Îîî),
      where("ÏÑ∏Î∂ÄÏÇ¨ÏóÖÎ™Ö", "==", updatedData.ÏÑ∏Î∂ÄÏÇ¨ÏóÖÎ™Ö)
    );
    const snapshot = await getDocs(q);
    if (!snapshot.empty && snapshot.docs[0].id !== id) {
      return { success: false, message: "‚ö†Ô∏è ÎèôÏùº ÏÑ∏Î∂ÄÏÇ¨ÏóÖÏóê Ïù¥ÎØ∏ Îì±Î°ùÎêú Îã§Î•∏ ÌöåÏõêÏù¥ Ï°¥Ïû¨Ìï©ÎãàÎã§." };
    }

    let ÌåÄÎ™Ö = updatedData.ÌåÄÎ™Ö;
    let Îã®ÏúÑÏÇ¨ÏóÖÎ™Ö = updatedData.Îã®ÏúÑÏÇ¨ÏóÖÎ™Ö;
    if ((!ÌåÄÎ™Ö || !Îã®ÏúÑÏÇ¨ÏóÖÎ™Ö) && updatedData.ÏÑ∏Î∂ÄÏÇ¨ÏóÖÎ™Ö) {
      const map = await getStructureBySubProgram(updatedData.ÏÑ∏Î∂ÄÏÇ¨ÏóÖÎ™Ö);
      if (map) {
        ÌåÄÎ™Ö = map.team;
        Îã®ÏúÑÏÇ¨ÏóÖÎ™Ö = map.unit;
      }
    }

    const docRef = doc(db, "SubProgramUsers", id);
    const oldDocSnap = await getDoc(docRef);
    let oldCreatedAt = getCurrentKoreanDate();
    if (oldDocSnap.exists()) {
      const oldData = oldDocSnap.data();
      oldCreatedAt = oldData.createdAt || getCurrentKoreanDate();
    }

    const ageGroup =
      normalizedBirthdate && normalizedBirthdate.length >= 4
        ? getAgeGroup(normalizedBirthdate.substring(0, 4))
        : "ÎØ∏ÏÉÅ";

    const processedData = {
      ...updatedData,
      ÌåÄÎ™Ö,
      Îã®ÏúÑÏÇ¨ÏóÖÎ™Ö,
      ÏÉùÎÖÑÏõîÏùº: normalizedBirthdate,
      Ïó∞ÎùΩÏ≤ò: normalizedPhone,
      Ïó∞Î†πÎåÄ: ageGroup,
      Í≥†Ïú†ÏïÑÏù¥Îîî,
      createdAt: oldCreatedAt,
      updatedAt: getCurrentKoreanDate()
    };

    await updateDoc(docRef, processedData);

    console.log("‚úÖ ÏÑ∏Î∂ÄÏÇ¨ÏóÖ ÌöåÏõê ÏàòÏ†ï ÏôÑÎ£å:", { id, ...processedData });
    return { success: true, id, ...processedData };
  } catch (err) {
    console.error("ÌöåÏõê ÏàòÏ†ï Ïò§Î•ò:", err);
    return { success: false, message: `ÌöåÏõê ÏàòÏ†ï Ï§ë Ïò§Î•ò Î∞úÏÉù: ${err.message}` };
  }
}

export async function deleteSubProgramMember(id) {
  try {
    const docRef = doc(db, "SubProgramUsers", id);
    await deleteDoc(docRef);
  } catch (err) {
    console.error("ÌöåÏõê ÏÇ≠Ï†ú Ïò§Î•ò:", err);
    throw err;
  }
}

export async function deleteMultipleSubProgramMembers(ids) {
  try {
    const deletions = ids.map((id) => deleteDoc(doc(db, "SubProgramUsers", id)));
    await Promise.all(deletions);
  } catch (err) {
    console.error("ÏùºÍ¥Ñ ÏÇ≠Ï†ú Ïò§Î•ò:", err);
    throw err;
  }
}

export async function findMemberByNameAndPhone(name, phone) {
  try {
    if (!name || !phone) return null;
    
    const normalizedPhone = normalizePhone(phone);
    const q = query(
      subProgramMemberCollection,
      where("Ïù¥Ïö©ÏûêÎ™Ö", "==", name),
      where("Ïó∞ÎùΩÏ≤ò", "==", normalizedPhone)
    );

    const snapshot = await getDocs(q);
    if (snapshot.empty) return null;

    const docSnap = snapshot.docs[0];
    const data = docSnap.data();
    
    return {
      id: docSnap.id,
      ...data,
      // ‚úÖ ÏïàÏ†ÑÌïú ÎÇ†Ïßú Î≥ÄÌôò
      ÏÉùÎÖÑÏõîÏùº: safeBirthdateExtract(data.ÏÉùÎÖÑÏõîÏùº),
      Ïó∞ÎùΩÏ≤ò: normalizePhone(data.Ïó∞ÎùΩÏ≤ò)
    };
  } catch (err) {
    console.error("Ï§ëÎ≥µ Î©§Î≤Ñ Ï°∞Ìöå Ïò§Î•ò:", err);
    return null;
  }
}

// Ïä§ÎßàÌä∏ Îß§Ïπ≠ (2Îã®Í≥Ñ) - ÏïàÏ†ÑÌïú ÎÇ†Ïßú ÎπÑÍµê
export async function matchMember(name, birth, phone) {
  try {
    const normalizedBirth = normalizeDate(birth);
    const normalizedPhone = normalizePhone(phone);
    
    const q = query(
      subProgramMemberCollection,
      where("Ïù¥Ïö©ÏûêÎ™Ö", "==", name),
      where("Ïó∞ÎùΩÏ≤ò", "==", normalizedPhone)
    );

    const snapshot = await getDocs(q);
    
    // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú ÏÉùÎÖÑÏõîÏùº ÎπÑÍµê (Firebase Timestamp Í≥†Î†§)
    for (const doc of snapshot.docs) {
      const data = doc.data();
      const existingBirth = safeBirthdateExtract(data.ÏÉùÎÖÑÏõîÏùº);
      
      if (existingBirth === normalizedBirth) {
        return { Í≥†Ïú†ÏïÑÏù¥Îîî: data.Í≥†Ïú†ÏïÑÏù¥Îîî };
      }
    }

    return null;
  } catch (err) {
    console.error("Îß§Ïπ≠ Ïò§Î•ò:", err);
    return null;
  }
}
